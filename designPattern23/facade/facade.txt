外观模式

概述：
	为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更容易使用。
	
适用性：
	1，当你要为一个复杂子系统提供一个简单接口是。子系统往往因为不断演化而变得越来越复杂。
		大多数模式使用时会产生更多更小的类。这使得子系统更具可重用性，也更容易对
		子系统进行定制，但这也给那些不需要定制子系统的用户带来一些使用上的困难。
		Facade可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要
		更多的可定制性的用户可以越过Facade层。
	2，客户程序与抽象类的实现部分之间存在这很大的依赖性。引入Facade将这个子系统与客户
		以及其他的子系统分离，可以提高子系统的独立性和可移植性。
	3，当你需要构建一个层次到的子系统时，使用Facade模式定义子系统中每层的入口点。
		如果子系统之间是相互依赖的，你可以让它们仅仅通过Facade进行通讯，从而简化了它们之间
		的依赖关系。

参与者：
	1，Facade
		知道哪些子系统类负责处理请求。
		将客户的请求代理给适当的子系统对象。
	2，Subsystemclasses
		实现子系统的功能。
		处理由Facade对象指派的任务。
		没有Facade的任何相关信息；即没有指向Facade的指针。

